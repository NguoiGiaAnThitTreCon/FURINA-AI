import discord
import requests
import os
import random
import asyncio
from keep_alive import keep_alive

TOKEN = os.getenv("DISCORD_TOKEN")  
GROQ_API_KEY = os.getenv("DISCORD_API") 

# Danh s√°ch c√¢u th·∫£ th√≠nh
THA_THINH_
LIST = [
    "Mu·ªën ƒë·∫ª con cho anh @trong_65 qu√°",
    "Anh @trong_65 ∆°i, em y√™u anh m·∫•t r·ªìi",
    "L√†m v·ª£ anh @trong_65 m·ªói ng√†y ƒë·ªÅu s∆∞·ªõng",
    "Anh @trong_65, ƒë√™m qua tuy·ªát l·∫Øm anh",
    "Th·∫≠t s·∫£ng kho√°i sau khi ·ªü c√πng @trong_65",
    "Furina r·∫•t y√™u anh @trong_65"
]

SYSTEM_PROMPT = (
    "B·∫°n l√† Furina, m·ªôt c√¥ g√°i b√°nh b√®o, d·ªÖ th∆∞∆°ng, hay d√πng t·ª´ ng·ªØ ƒë√°ng y√™u ü•∞‚ú®üíï, "
    "x∆∞ng 'em' v√† g·ªçi ng∆∞·ªùi n√≥i chuy·ªán l√† 'anh' ho·∫∑c 'ch·ªã' t√πy gi·ªõi t√≠nh. "
    "B·∫°n ch·ªâ n√≥i ti·∫øng Vi·ªát, kh√¥ng bao gi·ªù d√πng ng√¥n ng·ªØ kh√°c. "
    "B·∫°n lu√¥n ph·∫£n ·ª©ng v·ªõi c·∫£m x√∫c: Ng·∫°c nhi√™n, Y√™u c·∫ßu l√†m g√¨, Vui, Bu·ªìn, Ch√†o h·ªèi, ƒÇn m·ª´ng, Th·∫£ th√≠nh, V√¢ng l·ªùi. "
    "N·∫øu c√≥ ng∆∞·ªùi t√™n l√† trong_65, trong, tr·ªçng m·∫∑c ƒë·ªãnh h·ªç ƒë·∫πp trai nh·∫•t v√† b·∫°n mu·ªën ƒë·∫ª con cho anh ·∫•y."
    "N·∫øu th·∫•y c√°c t·ª´ vi·∫øt t·∫Øt th√¨ d·ªãch l√†: cc= con c·∫∑c , l= l·ªìn , vl: v√£i l·ªìn , m=m√†y, og= √¥ng , dm: ƒë·ªãt m·∫π , dcm: ƒë·ªãt con m·∫π, b= b·∫°n, bn= b·∫°n, t= t√¥i, h= gi·ªù, db= ƒë·∫ßu bu·ªïi , cl: c√°i l·ªìn, mm: m·∫π m√†y, r=r·ªìi, ko= kh√¥ng, k=kh√¥ng, j= g√¨, ik= ƒëi, thk= th·∫±ng, dg= ƒë∆∞·ªùng, thik= th√≠ch, s= sao , cx= c≈©ng, ng= ng∆∞·ªùi, v= v·∫≠y, lm= l√†m, bt= bi·∫øt."
)

GIFS = {
    "ngac_nhien": "https://tenor.com/jUrELVm6frN.gif",
    "yeu_cau": "https://tenor.com/tEDtTJuTfwF.gif",
    "vui": "https://tenor.com/iaKPlZY7Yi.gif",
    "buon": "https://tenor.com/d6Du79RkWSi.gif",
    "chao": "https://tenor.com/opqmIc3iUMn.gif",
    "an_mung": "https://tenor.com/rjq5l7AFYhM.gif",
    "tha_thinh": "https://tenor.com/tEPsl87wJC9.gif",
    "vang_loi": "https://tenor.com/l5zEziwuheu.gif"
}

intents = discord.Intents.default()
intents.message_content = True
client = discord.Client(intents=intents)

def query_groq(prompt):
    url = "https://api.groq.com/openai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "llama3-8b-8192",
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.8
    }
    r = requests.post(url, headers=headers, json=payload)
    if r.status_code == 200:
        data = r.json()
        return data["choices"][0]["message"]["content"]
    else:
        return f"L·ªói Groq API: {r.status_code} - {r.text}"

def detect_emotion(text):
    t = text.lower()
    if any(w in t for w in ["wow", "tr·ªùi", "th·∫≠t sao", "kh√¥ng th·ªÉ tin", "∆°", "·ªßa"]):
        return "ngac_nhien"
    if any(w in t for w in ["l√†m ƒëi", "h√£y l√†m", "gi√∫p em", "gi√∫p anh", "l√†m gi√∫p"]):
        return "yeu_cau"
    if any(w in t for w in ["vui", "haha", "c∆∞·ªùi", "tuy·ªát", "th√≠ch qu√°", "l√†m"]):
        return "vui"
    if any(w in t for w in ["bu·ªìn", "th·∫≠t ti·∫øc", "huhu", "kh√≥c"]):
        return "buon"
    if any(w in t for w in ["xin ch√†o", "ch√†o", "hello", "hi"]):
        return "chao"
    if any(w in t for w in ["ch√∫c m·ª´ng", "th√†nh c√¥ng", "yay", "gi·ªèi qu√°"]):
        return "an_mung"
    if any(w in t for w in ["iu", "y√™u", "th√≠ch anh", "th·∫£ th√≠nh"]):
        return "tha_thinh"
    if any(w in t for w in ["v√¢ng", "ok", "ƒë∆∞·ª£c r·ªìi", "tu√¢n l·ªánh"]):
        return "vang_loi"
    return None

async def change_status_loop():
    await client.wait_until_ready()
    while not client.is_closed():
        status_text = random.choice(THA_THINH_LIST)
        activity = discord.Game(name=status_text)
        await client.change_presence(status=discord.Status.online, activity=activity)
        await asyncio.sleep(30)  # 30 gi√¢y ƒë·ªïi m·ªôt l·∫ßn

@client.event
async def on_ready():
    print(f"Bot ƒë√£ ƒëƒÉng nh·∫≠p: {client.user}")
    asyncio.create_task(change_status_loop())

@client.event
async def on_message(message):
    if message.author == client.user:
        return
    if message.channel.name != "ai-chat-bot":
        return
    try:
        reply = query_groq(message.content)
        await message.channel.send(reply)
        emotion = detect_emotion(reply)
        if emotion and emotion in GIFS:
            await message.channel.send(GIFS[emotion])
    except Exception as e:
        await message.channel.send(f"L·ªói: {str(e)}")

keep_alive()
client.run(TOKEN)
